==========================
``7-base_geometry`` module
==========================

``BaseGeometry`` a class that validates value

Importing module
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

::

Now Use it
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("my_int", 89)

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("width", 20)


``test non int for value``
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("name", "Michael")
    Traceback (most recent call last):
        ...
    TypeError: name must be an integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("width", "2meter")
    Traceback (most recent call last):
        ...
    TypeError: width must be an integer


``test value less or equal than 0``
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("height", 0):
    Traceback (most recent call last):
        ...
    ValueError: height must be greater than 0

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("age", -1)
    Traceback (most recent call last):
        ...
    ValueError: age must be greater than 0


``test value other types``
    >>> bg = BaseGeometry()
    >>> bg.integer_validator("list", [1, 2, 3, 4])
    Traceback (most recent call last):
        ...
    TypeError: list must be an integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("bool", True)
    Traceback (most recent call last):
    ...
    TypeError: bool must be an integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("tuple", ("me", "is"))
    Traceback (most recent call last):
        ...
    TypeError: tuple must be an integer

    >>> bg = BaseGeometry()
    >>> bg.integer_validator("dictionary", {"name": "Michael", "age": 20})
    Traceback (most recent call last):
        ...
    TypeError: dictionary must be an integer
